@page "/categories/form/{Id}"
@using System.Net.Http
@using System.Net.Http.Json
@using TestBlazorApp.Model
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<h3>@(isNew ? "Добавление категории" : "Изменение категории")</h3>
@if(errorMessage != null)
{
    <div class="alert alert-danger fade-message">@errorMessage</div>

}
@if(succesMessage != null)
{
    <div class="alert alert-success fade-message">@succesMessage</div>
}
@if (isNew)
{
    <div class="mb-3">
        <div class="form-group">
            <label>Наименование категории</label>
            <input @bind="category.Categoryname" class="form-control" @bind:event="oninput"/>
            @if (string.IsNullOrEmpty(category.Categoryname))
            {
                <small class="text-danger">Поле обязательно для заполнения</small>
            }
        </div>
    </div>
    <div class="text-end">
        <button @onclick="() => AddCategory()" class="btn btn-primary mt-2">Добавить</button>
        <button @onclick="ClientNavigate" class="btn btn-primary mt-2">Назад</button>
    </div>
}
else
{
    <div class="mb-3">
        <div class="form-group">
            <label>Наименование категории</label>
            <input @bind="category.Categoryname" class="form-control" />
            @if (string.IsNullOrEmpty(category.Categoryname))
            {
                <small class="text-danger">Поле обязательно для заполнения</small>
            }
        </div>
    </div>
    <div class="text-end">
        <button @onclick="() => UpdateCategory()" class="btn btn-primary mt-2">Изменить</button>
        <button @onclick="ClientNavigate" class="btn btn-primary mt-2">Назад</button>
    </div>
}

<style>
    .fade-message {
        animation: fadeOut 3s ease-in-out forwards;
    }

    @@keyframes fadeOut {
        0% {
            opacity: 1;
        }

        70% {
            opacity: 1;
        }

        100% {
            opacity: 0;
            display: none;
        }
    }
</style>
@code {
    [Parameter] 
    public string? Id { get; set; }
    private string? errorMessage;
    private string? succesMessage;
    private List<Model.Category>? categories = new();
    private Model.Category? category = new();
    private bool isNew => Id == "new";

    // Инициализация компонента - загрузка категорий
    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    // Загрузка категорий из API и определения режима создания или редактироования
    private async Task LoadCategory()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            categories = await httpClient.GetFromJsonAsync<List<Model.Category>>("category");
            if(!isNew && !string.IsNullOrEmpty(Id))
            {
                category = await httpClient.GetFromJsonAsync<Model.Category>($"category/{Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Создание категории
    private async Task AddCategory()
    {

        if (string.IsNullOrWhiteSpace(category.Categoryname))
        {
            succesMessage = null;
            errorMessage = "Наименование обязательно";
            return;
        }

        // Проверка существования (регистронезависимая)
        bool exists = categories.Any(c =>
            c.Categoryname.Equals(category.Categoryname, StringComparison.OrdinalIgnoreCase));

        if (exists)
        {
            succesMessage = null;
            errorMessage = "Категория с таким именем уже существует";
            return;
        }

        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PostAsJsonAsync("category", category);
            categories = await httpClient.GetFromJsonAsync<List<Model.Category>>("category");

            if (response.IsSuccessStatusCode)
            {
                errorMessage = null;
                category = new Model.Category();
                succesMessage = "Категория добавлена";
                _ = HideMessageAfterDelay();
            }
            else
            {
                Console.WriteLine($"Ошибка: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    // Обновление категории
    private async Task UpdateCategory()
    {
        bool exists = categories.Any(c => c.Id != category.Id &&
            c.Categoryname.Equals(category.Categoryname, StringComparison.OrdinalIgnoreCase));

        if (exists)
        {
            errorMessage = "Категория с таким именем уже существует";
            return;
        }

        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PutAsJsonAsync($"category/{category.Id}", category);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/categories");
            }
            else
            {
                Console.WriteLine($"Ошибка: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Затухание сообщения об выполненой операции
    private async Task HideMessageAfterDelay()
    {
        await Task.Delay(3000);
        succesMessage = null;
        StateHasChanged();
    }

    // Возврат на станицу категорий
    private void ClientNavigate()
    {
        Navigation.NavigateTo("/categories");
    }
}
