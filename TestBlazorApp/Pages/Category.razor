@page "/categories"
@using System.Net.Http
@using System.Net.Http.Json
@using TestBlazorApp.Model
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation


<PageTitle>Категории</PageTitle>
<h3>Категории</h3>
@if (errorMessage != null)
{
    <div class="alert alert-danger fade-message">@errorMessage</div>

}
@if (succesMessage != null)
{
    <div class="alert alert-success fade-message">@succesMessage</div>
}
@if(categories == null)
{
    <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Список продуктов</h5>
        </div>

        <div class="row fw-bold">
            <div class="col ms-3"></div>
        </div>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th style="width: 30%">Наименование</th>
                            <th style="width: 20%"></th>
                            <th style="width: 20%"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            <tr>
                                <td>@category.Categoryname</td>
                                <td>
                                    <button @onclick="() => UpdateCategory(category)"
                                    class="btn btn-primary mt-2">
                                        Изменить
                                    </button>
                                </td>
                                <td>
                                    <button @onclick="() => DeletedCategory(category)"
                                    class="btn btn-warning mt-2">
                                        Удалить
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer text-muted">
            Всего категорий: @categories.Count
        </div>           
    </div>
    <div class="text-end">
        <button @onclick="CreateForm" class="btn btn-primary ms-3 mt-1">Добавить</button>
    </div>

 

}
<style>
    .fade-message {
        animation: fadeOut 3s ease-in-out forwards;
    }

    @@keyframes fadeOut {
        0% {
            opacity: 1;
        }

        70% {
            opacity: 1;
        }

        100% {
            opacity: 0;
            display: none;
        }
    }
</style>
@code {
    private List<Model.Category> categories = new();
    private string? errorMessage;
    private string? succesMessage;

    // Инициализация компонента - загрузка категорий
    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    // Загрузка категорий из API
    private async Task LoadCategory()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            categories = await httpClient.GetFromJsonAsync<List<Model.Category>>("category");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Перенаправление на форму создания
    private void CreateForm()
    {
        Navigation.NavigateTo("/categories/form/new");
    }

    // Перенаправление на форму редактирования
    private void UpdateCategory(Model.Category category)
    {
        try
        {
            Navigation.NavigateTo($"/categories/form/{category.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    //Удаление категории
    private async Task DeletedCategory(Model.Category category)
    {
        try
        {
            errorMessage = null;
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.DeleteAsync($"category/{category.Id}");

            if (!response.IsSuccessStatusCode)
            {
                succesMessage = null;
                errorMessage = "Категория используется удалить не возможно";
            }
            else
            {
                succesMessage = "Категория удалена";
                await LoadCategory();
            }

            _ = HideMessageAfterDelay();
        }
        catch (Exception ex)
        {
            succesMessage = null;
            errorMessage = "Категория используется удалить не возможно";
            Console.WriteLine($"Error: {ex.Message}");
            _ = HideErrorMessageAfterDelay();
        }
    }

    // Затухание сообщения об выполненой операции
    private async Task HideMessageAfterDelay()
    {
        await Task.Delay(3000);
        succesMessage = null;
        StateHasChanged();
    }

    // Затухание сообщения об ошибке
    private async Task HideErrorMessageAfterDelay()
    {
        await Task.Delay(3000);
        errorMessage = null;
        StateHasChanged();
    }
}
